service: dynabot

frameworkVersion: ">=1.1.0 < 2.0.0"

# used for readability
custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  extra: ${file(vars/${self:custom.stage}.yml)}

  # todo - move this out to parameter
  domainname: mattcliff.net
  hostname: dynabot-${self:custom:stage}-api

provider:
  name: aws
  runtime: python3.6
  region: us-west-2   # keep this for now, but remove it before we wrap up

  environment:
    STAGE: ${self:custom.stage}
    DYNAMODB_TABLE: {Ref: DynaBotDB}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource:
        "Fn::Join":
          - ""
          -
            - "arn:aws:dynamodb:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":table/"
            - Ref: DynaBotDB
            - "*"


functions:
  dynabot:
    handler: handler.handle_dynabot
    tags:
      created: serverless for dynabot
      Name: Dynabot Primary Lambda Function

    events:
      - http:
          path: api/metrics/{bottype}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

      - http:
          path: api/metrics/{bottype}
          method: post



resources:
  Resources:
    # this should already exist so no impacts
    MyHostedZone:
      Type: AWS::Route53::HostedZone
      Properties:
        Name: ${self:custom.domainname}

    ApiGatewayCustomDomain:
      Type: AWS::ApiGateway::DomainName
      Properties:
        DomainName: ${self:custom.hostname}

    MyDNSRecord:
      Type: AWS::Route53::RecordSetGroup
      DependsOn: ApiGatewayCustomDomain
      Properties:
        HostedZoneId: {Ref: MyHostedZone}
        RecordSets:
          - Type: A
            Name: { "Fn::GetAtt" : ApiGatewayDomain.domainName}
            AliasTarget:
                HostedZoneId: Z2FDTNDATAQYW2  # hardcoded for all CloudFront
                DNSName: { "Fn::GetAtt" : ApiGatewayDomain.distributionDomainName }

    DynaBotDB:
      Type: 'AWS::DynamoDB::Table'
      #DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: Id
            AttributeType: S
          - AttributeName: CreatedAt
            AttributeType: S
          - AttributeName: bottype
            AttributeType: S
        KeySchema:
          - AttributeName: Id
            KeyType: HASH
          - AttributeName: CreatedAt
            KeyType: RANGE
        Tags:
          - Key: "Created"
            Value: "part of DynaBot SLS"
          - Key: "Name"
            Value: "Dynabot Serverless DB"
        ProvisionedThroughput: ${self:custom.extra.DynamoCapacity}
        GlobalSecondaryIndexes:
          - IndexName: BotTypeIndex
            KeySchema:
              - AttributeName: bottype
                KeyType: HASH
              - AttributeName: CreatedAt
                KeyType: RANGE
            Projection:
              NonKeyAttributes:
                - "deviceid"
              ProjectionType: "INCLUDE"
            ProvisionedThroughput: ${self:custom.extra.DynamoCapacity}

  Outputs:
    ExportServiceEndpoint:
      Description: "URL Endpoint for the REST Service"
      Value:
        "Fn::Join":
          - ""
          -
            - "https://"
            - Ref: "ApiGatewayRestApi"
            - ".execute-api."
            - Ref: "AWS::Region"
            - ".amazonaws.com/"
            - ${self:custom.stage}
      Export:
        Name: SLSServiceEndpoint
